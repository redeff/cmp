
==================== FINAL INTERFACE ====================
2018-01-15 15:11:15.160961 UTC

interface main:Main 8022
  interface hash: 34885b94fb8606b8b88d82bd86f83e50
  ABI hash: 2e45325adc2023c5f644889b8e3e01ef
  export-list hash: dd596c5af3add1eb28e20f16e2792d04
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d131dca2690418ff6d6670385c27b9e9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 permutation-0.5.0.5
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:Data.Version
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  array-0.5.2.0:Data.Array.Base 1f01fb6be40b1dae8e5e1ae4688ca424
import  -/  array-0.5.2.0:Data.Array.IArray b1901c9360c303a4ea8e5f89217296aa
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Arr cf4349fa30e5f82fdb67fa740927bec8
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  permutation-0.5.0.5:Data.Permute c0820c23d83f129cefc6e9d399a0be2a
import  -/  permutation-0.5.0.5:Data.Permute.Base 127e89ec6454428eed9e533a7b69e014
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
f98d8513f2876acd2315f1e04f639f5c
  $wperExp' ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> Data.Permute.Base.Permute
  {- Arity: 3, Strictness: <L,U(U)><S,U><L,U>, Inline: [0] -}
9c5b9a09bab55b7ab8667c18392964a4
  $wshift_permute ::
    GHC.Prim.Int#
    -> GHC.Types.Int -> GHC.Types.Int -> Data.Permute.Base.Permute
  {- Arity: 3, Strictness: <S,U><L,U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int) ->
                 Data.Permute.$wlistPermute
                   ww
                   (case w1 of wild { GHC.Types.I# x ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                    } in
                    let {
                      n :: [GHC.Types.Int]
                      = case w of wild1 { GHC.Types.I# x1 ->
                        GHC.Enum.eftInt x1 (GHC.Prim.-# ww 1#) }
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.># 0# y) of wild1 {
                      GHC.Types.False
                      -> letrec {
                           go :: GHC.Prim.Int# -> [GHC.Types.Int]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ (x1 :: GHC.Prim.Int#) ->
                             let {
                               ds1 :: [GHC.Types.Int]
                               = case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.==# x1 y) of wild2 {
                                   GHC.Types.False -> go (GHC.Prim.+# x1 1#) GHC.Types.True -> n }
                             } in
                             letrec {
                               go1 :: [GHC.Types.Int] -> [GHC.Types.Int]
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds :: [GHC.Types.Int]) ->
                                 case ds of wild2 {
                                   [] -> ds1
                                   : y1 ys
                                   -> case y1 of wild3 { GHC.Types.I# x2 ->
                                      case w of wild4 { GHC.Types.I# y2 ->
                                      let {
                                        x3 :: GHC.Prim.Int# = GHC.Prim.+# (GHC.Prim.*# x2 x) x1
                                      } in
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<# x3 y2) of wild5 {
                                        GHC.Types.False -> ds1
                                        GHC.Types.True
                                        -> GHC.Types.:
                                             @ GHC.Types.Int
                                             (GHC.Types.I# x3)
                                             (go1 ys) } } } }
                             } in
                             go1 Main.main9
                         } in
                         case go 0# of wild2 {
                           [] -> Main.main8
                           : x1 xs
                           -> GHC.Base.++
                                @ GHC.Types.Int
                                xs
                                (GHC.Types.: @ GHC.Types.Int x1 (GHC.Types.[] @ GHC.Types.Int)) }
                      GHC.Types.True
                      -> case n of wild2 {
                           [] -> Main.main8
                           : x1 xs
                           -> GHC.Base.++
                                @ GHC.Types.Int
                                xs
                                (GHC.Types.:
                                   @ GHC.Types.Int
                                   x1
                                   (GHC.Types.[] @ GHC.Types.Int)) } } })) -}
1470a719932b6b2821817d29ef2b8a47
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2cbb0f8ab3b9ea7b542b4908ba8159bd
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main21
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main18
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main14
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv6 } } } }) -}
a9f99a65f9210b459bbfa68b62524541
  main10 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main11) -}
9c96b485992fc9b81ae076995a09a5e6
  main11 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (Data.Permute.Base.$fShowPermute_$cshow Main.main12)
                   GHC.Show.$fShow[]1) -}
79136ea98598646db911ad5ea7515bc2
  main12 :: Data.Permute.Base.Permute
  {- Unfolding: (case (Main.$wshift_permute
                         30#
                         Main.main7
                         Main.main6)
                        `cast`
                      (Data.Permute.Base.N:Permute[0]) of ww { Data.IntArray.IntArray ww1 ww2 ->
                 Main.$wperExp' Main.main13 ww1 ww2 }) -}
e7004eff7a3c5ab4ad8cf42a48414f52
  main13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
2803bb66465e39610bf874ad1d3df940
  main14 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main15) -}
bf36388d9676e6b912ccdb153098b62b
  main15 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (Data.Permute.Base.$fShowPermute_$cshow Main.main16)
                   GHC.Show.$fShow[]1) -}
3e9df4d68aa633fa1d523ea95e9ec4b8
  main16 :: Data.Permute.Base.Permute
  {- Unfolding: (case (Main.$wshift_permute
                         30#
                         Main.main7
                         Main.main6)
                        `cast`
                      (Data.Permute.Base.N:Permute[0]) of ww { Data.IntArray.IntArray ww1 ww2 ->
                 Main.$wperExp' Main.main17 ww1 ww2 }) -}
8173672dbf1062c8a40388ccb703dec7
  main17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
e3838819b049bd09f7fa6cb04c6a8225
  main18 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main19) -}
1f965908ac3f229e64fe9e0935c8dde8
  main19 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (Data.Permute.Base.$fShowPermute_$cshow Main.main20)
                   GHC.Show.$fShow[]1) -}
86a0ea1257dd4f5cec3645b914a32fa6
  main2 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main3) -}
ab35a3480e19d45613dc5d30a2ea73a3
  main20 :: Data.Permute.Base.Permute
  {- Unfolding: (case (Main.$wshift_permute
                         30#
                         Main.main7
                         Main.main6)
                        `cast`
                      (Data.Permute.Base.N:Permute[0]) of ww { Data.IntArray.IntArray ww1 ww2 ->
                 Main.$wperExp' Main.main_l ww1 ww2 }) -}
f5267a96fac6b8a4b8d69a173c39509d
  main21 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main22) -}
1f9f90a05f0b63e2be74841e56ff9914
  main22 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (Data.Permute.Base.$fShowPermute_$cshow Main.main23)
                   GHC.Show.$fShow[]1) -}
07d1cfde97054d95234ff32d449adae4
  main23 :: Data.Permute.Base.Permute
  {- Unfolding: (Main.$wshift_permute 30# Main.main7 Main.main6) -}
c39982907a9df98d818ef2da8673fe40
  main24 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
db37ff5902439fa98c6a350b3de83085
  main3 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (Data.Permute.Base.$fShowPermute_$cshow Main.main4)
                   GHC.Show.$fShow[]1) -}
32a1bbf52b54d2290ae5ed9245d8a94c
  main4 :: Data.Permute.Base.Permute
  {- Unfolding: (case (Main.$wshift_permute
                         30#
                         Main.main7
                         Main.main6)
                        `cast`
                      (Data.Permute.Base.N:Permute[0]) of ww { Data.IntArray.IntArray ww1 ww2 ->
                 Main.$wperExp' Main.main5 ww1 ww2 }) -}
3b308b48c7b9eae459fbeaf738e437c1
  main5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
2971b796e58da5cef931f8644f7633c7
  main6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
cc68995db302085a91b7d744bcfc1b89
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
86bd705e39c638621078fb9fbd9c5a8c
  main8 :: [GHC.Types.Int]
  {- Strictness: x -}
0452d438c3b1584b5bfc3baa7fe11a97
  main9 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.efdInt 0# 1#) -}
acbc7313b6a939b9d5d104800e3cbbb9
  main_l :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

